plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    //id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    runs {
        datagen {
            server()
            name = "Data Generation"
            runDir = "build/datagen"
            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
        }
    }
}

assemble.dependsOn(runDatagen)

sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated"
            ]
        }
    }
}

repositories {
    mavenCentral()
    maven { url = "https://maven.nucleoid.xyz/" }
    maven { url = "https://maven.gegy.dev/" }
    maven { url = uri("https://storage.googleapis.com/devan-maven/") }
}

dependencies {

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation include('fr.catcore:server-translations-api:1.4.12+1.18.2')
    modImplementation include('eu.pb4:polymer:0.2.0-pre.4+1.18.2')
    modImplementation include("eu.pb4:hologram-api:0.2.1+1.18-pre5")
    modImplementation include("eu.pb4:placeholder-api:1.1.3+1.17.1")

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 16
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

if (System.getenv("MODRINTH")) {
    modrinth {
        token = System.getenv("MODRINTH")
        projectId = 'GFWR9kLQ'// The ID of your modrinth project, slugs will not work.
        versionNumber = "" + version // The version of the mod to upload.
        uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
        gameVersions = [((String) project.minecraft_version)]
        changelog = System.getenv("CHANGELOG")
        loaders = ["fabric", "quilt"]
    }

    remapJar {
        finalizedBy project.tasks.modrinth
    }
}


// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
